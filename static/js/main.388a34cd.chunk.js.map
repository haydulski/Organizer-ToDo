{"version":3,"sources":["components/Task.js","components/TaskList.js","components/AddTask.js","components/App.js","serviceWorker.js","index.js"],"names":["Task","props","time","Date","task","finishDate","toLocaleString","className","style","important","color","text","date","active","onClick","passive","id","remove","TaskList","activeTask","tas","filter","ta","passiveTask","listActive","map","key","listPasive","length","sort","a","b","finshDate","slice","AddTask","minDate","toISOString","state","handleTextAdd","e","setState","target","value","handleCheckbox","handleDate","handleAppend","add","this","type","placeholder","onChange","htmlFor","checked","min","max","Component","counter","App","tasks","handleRemove","index","findIndex","splice","handlePassive","forEach","getTime","handleAdd","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.388a34cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Task.css';\r\n\r\nconst Task = (props) => {\r\n    const time = new Date(props.task.finishDate).toLocaleString()\r\n    const styleImp = {\r\n        color: 'red',\r\n    }\r\n    // console.log(props.task.improtant);\r\n    // console.log(props.task);\r\n    return (\r\n        <div className=\"singletask\" style={props.task.important ? styleImp : null} >\r\n            {props.text}, {props.date} <span>\r\n                {!props.task.active && <span style={{ color: \"red\", }}> End at: {time}</span>}\r\n                {props.task.active && <button className=\"complete\" onClick={() => props.passive(props.task.id)}>Task completed</button>}\r\n                <button onClick={() => props.remove(props.task.id)}>X</button></span>\r\n        </div>\r\n    )\r\n}\r\nexport default Task","import React from 'react';\r\nimport './TaskList.css';\r\nimport Task from './Task';\r\nconst TaskList = (props) => {\r\n    const activeTask = props.tas.filter(ta => ta.active === true);\r\n    const passiveTask = props.tas.filter(ta => ta.active === false);\r\n\r\n    const listActive = activeTask.map(task =>\r\n        <Task passive={props.passive} remove={props.remove} key={task.id} text={task.text} date={task.date} task={task} />)\r\n    const listPasive = passiveTask.map(task =>\r\n        <Task passive={props.passive} remove={props.remove} key={task.id} text={task.text} date={task.date} task={task} />)\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"active\">\r\n                {listActive}</div>\r\n            <div className=\"passive\">\r\n                <h1>Done tasks ({passiveTask.length})</h1>\r\n                <p>{passiveTask.length > 4 && <span>Five last tasks...</span>}</p>\r\n                {listPasive.sort((a, b) => b.finshDate - a.finishDate).slice(0, 5)}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\r\nimport './Addtask.css'\r\n\r\n\r\nclass AddTask extends Component {\r\n    minDate = new Date().toISOString().slice(0, 10);\r\n    state = {\r\n        text: \"\",\r\n        date: this.minDate,\r\n        important: false,\r\n\r\n    }\r\n    handleTextAdd = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n\r\n    }\r\n    handleCheckbox = () => {\r\n        this.setState({\r\n            important: !this.state.important\r\n        })\r\n    }\r\n    handleDate = (e) => {\r\n        this.setState({\r\n            date: e.target.value,\r\n        })\r\n    }\r\n    handleAppend = () => {\r\n        const { text, date, important } = this.state;\r\n        const add = this.props.add(text, date, important);\r\n        if (add) {\r\n            this.setState({\r\n                text: \"\",\r\n                date: this.minDate,\r\n                important: false\r\n            })\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        const { text, date, important } = this.state;\r\n        return (\r\n            <div className=\"taskadding\">\r\n                <h3>Add new task to list</h3>\r\n\r\n                <input type=\"text\" id=\"name\" placeholder=\"your task...\" value={text} onChange={this.handleTextAdd} />\r\n                <label htmlFor=\"name\"> type new task</label><span>\r\n                    <input type=\"checkbox\" id=\"checked\" checked={important} onChange={this.handleCheckbox} />\r\n                    <label htmlFor=\"checked\">Is it important?</label></span>\r\n                <br />\r\n                <input type=\"date\" min={this.minDate} max=\"2020-12-31\" id=\"dateOfTask\" value={date} onChange={this.handleDate} />\r\n                <label htmlFor=\"dateOfTask\">   Choose date of finish</label><br />\r\n                <button onClick={this.handleAppend}>Add</button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React, { Component } from 'react';\nimport './App.css';\nimport TaskList from './TaskList';\nimport AddTask from './AddTask';\nlet counter = 5;\n\nclass App extends Component {\n\n  state = {\n    tasks: [\n      { id: '0', text: 'clean floor', date: '2020-04-06', active: true, important: false, finishDate: null },\n      { id: '1', text: 'go ride on donkey Rocco', date: '2020-04-06', active: true, important: false, finishDate: null },\n      { id: '2', text: 'drink 1 liter milk every day', date: '2020-04-06', active: true, important: true, finishDate: null },\n      { id: '3', text: 'ask mum how she can scream 12h without breake', date: '2020-04-03', active: true, important: false, finishDate: null },\n      { id: '4', text: 'buy gift for myself', date: '2020-03-02', active: true, important: false, finishDate: null },\n    ]\n  }\n\n  handleRemove = (e) => {\n    let tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === e);\n\n    tasks.splice(index, 1);\n    this.setState({\n      tasks\n    })\n  }\n  handlePassive = (e) => {\n    const date = new Date()\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === e) {\n        task.active = false;\n        task.finishDate = date.getTime()\n      }\n    }\n    )\n    this.setState({\n      tasks\n    })\n  }\n  handleAdd = (text, date, important) => {\n    if (text === \"\") return alert(\"Add task in provided place\")\n    const task = {\n      id: counter,\n      text,\n      date, active: true,\n      important,\n      finishDate: null\n    }\n    this.setState({\n      tasks: [...this.state.tasks, task]\n    })\n    counter++\n    return true\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Organizer</h1>\n        <AddTask add={this.handleAdd} />\n        <TaskList passive={this.handlePassive} remove={this.handleRemove} tas={this.state.tasks} />\n        <h6>haydulski</h6>\n      </div>);\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}